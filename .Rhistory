abs(res) <- tapply(mtcars$hp,mtcars$cyl,mean)
res <- tapply(mtcars$hp,mtcars$cyl,mean)
abs(res)
tapply(mtcars$hp,mtcars$cyl,abs
)
tapply(mtcars$hp,mtcars$cyl,mean,abs)
tapply(mtcars$hp,mtcars$cyl,mean)
209 - 82
library(datasets)
data(iris)
summary(iris)
summary(iris, Species='virginica')
?summary
subset(iris, Species='virginica')
v <-subset(iris, Species='virginica')
summary(v)
apply(iris[, 1:4], 2, mean)
mean(mtcars$mpg, mtcars$cyl)
library(datasets)
data(mtcars)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
v <-subset(iris, Species='virginica')
summary(v)
v
v <-subset(iris, 'Species=virginica')
v <-subset(iris, Species='virginica')
?subset
subset(iris, Species=virginica)
subset(iris, Species==virginica)
subset(iris, Species=='virginica')
subset(iris, Species==virginica)
subset(iris, Species=='virginica')
with(iris, subset(Species, 'virginica'))
with(iris, Species='virginica')
subset(iris,Species)
subset(iris,Species='virginica')
subset(iris, Species == 'virginica')
subset(iris, Species == 'virginica')
summary(iris)
subset(iris, Species == "virginia")
subset(iris, Species == "virginica")
V <-subset(iris, Species == "virginica")
summary(v)
summary(iris)
summary(v)
summary(v)
v
subset(iris, Species == 'virginica')
v <- subset(iris, Species == 'virginica')
v
summary(v)
v <- subset(iris, Species == 'virginica')
summary(iris)
vir <- subset(iris, Species == 'setosa')
summary(vir)
lapply(vir$Sepal.Length,vir$Sepal.Width,mean)
lapply(vir$Sepal.Length,vir$Sepal.Width,mean)
lapply(vir$Sepal.Length)
lapply(vir$Sepal.Length, vir$Sepal.Width, mean)
vir
vir$Sepal.Length
vir$Sepal.Width
lapply(vir$Sepal.Length, vir$Sepal.Width, mean)
lapply(vir$Sepal.Length, vir$Species, mean)
summary(v)
mtcars$hp
tapply(mtcars$hp,mtcars$cyl,mean)
iris
tapply(iris$Sepal.Length, iris$Species,mean)
apply(iris$Sepal.Length, iris$Species,mean)
lapply(iris$Sepal.Length, iris$Species,mean)
lapply(iris)
lapply(iris, mean)
?lapply
set.seed(1)
rpois(5,2)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
Rprof()
fit <- lm(y~ x1 + x2)
library("rJava", lib.loc="C:/Users/srobin/Documents/R/win-library/3.0")
install.packages("rjava")
install.packages("rJava")
library("rJava", lib.loc="C:/Users/srobin/Documents/R/win-library/3.0")
library("xlsx", lib.loc="C:/Users/srobin/Documents/R/win-library/3.0")
library("xlsx", lib.loc="C:/Users/srobin/Documents/R/win-library/3.0")
install.packages("rJava")
library("xlsx", lib.loc="C:/Users/srobin/Documents/R/win-library/3.0")
R.version
library("rJava", lib.loc="C:/Users/srobin/Documents/R/win-library/3.0")
install.packages("RMySQL")
install.packages("Rmysql")
version
install.packages("RMySql")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
RMySql
install.packages("RMySql")
version
install.packages("RMySql")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
RMySql
install.packages("RMySQL")
install.packages("RMySQL", type="source")
Sys.getenv('MYSQL_HOME')
install.packages("RMySQL", type="source")
version
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
versionb
verson
version
library("RMySQL", lib.loc="C:/Users/srobin/Documents/R/win-library/3.1")
library(RMySQL)
install.packages('RMySQL',type='source')
library("RMySQL", lib.loc="C:/Users/srobin/Documents/R/win-library/3.1")
con = url("http://scholar.google.com/citations?user=HI-I60AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
library(XML)
install.packages("XML")
library(XML)
url <- con
html <- htmlTreeParse(url, useInternalNodes=T)
html <- htmlTreeParse(url, useInternalNodes=T)
url
url
con
install.packages("JavaGD")
library("JavaGD", lib.loc="C:/Users/srobin/Documents/R/win-library/3.1")
con
con = url("http://scholar.google.com/citations?user=HI-I60AAAAJ&hl=en")
con
con
url <-con
html <- htmlTreeParse(url, useInternalNodes=T)
html <- htmlTreeParse(url, useInternalNodes=TRUE)
html <- htmlTreeParse(url, useInternal)
html <- htmlTreeParse(url)
?htmlTreeParse
html <- xmlTreeParse(url, useInternalNodes=T)
html = htmlTreeParse(url, useInternalNodes=T)
html = htmlTreeParse(con, useInternalNodes=T)
con = url("http://scholar.google.com/citations?user=HI-I60AAAAJ&hl=en")
html = htmlTreeParse(con, useInternalNodes=T)
html2 = htmlTreeParse(con, useInternalNodes=T)
html = htmlTreeParse(con, isURL=TRUE,useInternalNodes=T)
con = url("http://scholar.google.com/citations?user=HI-I60AAAAJ&hl=en")
file.load("http://scholar.google.com/citations?user=HI-I60AAAAJ&hl=en")
?file.load
??load.file
download.file("http://scholar.google.com/citations?user=HI-I60AAAAJ&hl=en")
download.file("http://scholar.google.com/citations?user=HI-I60AAAAJ&hl=en", destfile="index.html")
?load.file
file.load
?file
open("index.html")
read.file("http://scholar.google.com/citations?user=HI-I60AAAAJ&hl=en")
file.read("http://scholar.google.com/citations?user=HI-I60AAAAJ&hl=en")
read
?read
??read
?xmltreeparse
library(XML)
?xmlTreeParse
library(MASS)
school<- painters$school
school<- painters$School
school.freq<- table(school)
school.freq
cbind(school.freq)
max(school.freq)
names(school)
painters
comp <- painters$composition
comp <- painters$Composition
table(comp)
table(painters$School)
table(order(painters$School)
)
table(sort(painters$School))
sort(table(painters$School))
sort(table(painters$School), decreasing=TRUE)
barplot(school.freq)
barplot(school.freq, col="red,blue")
barplot(school.freq, col=c("red","blue")
)
barplot(school.freq, col=c("red","blue","yellow","orange","green")
)
barplot(school.freq, col=c("red","blue","yellow","orange","green","purple"))
barplot(school.freq, col=c("red","blue","yellow","orange","green","purple","grey","black"))
pie(school.freq)
+   "orange", "blue", "pink", "cyan")
+   "orange", "blue", "pink", "cyan")
colors = c("red", "yellow", "green", "violet", "orange", "blue", "pink", "cyan")
pie(school.freq,col=colors)
tapply(painters$Composition, painters$School, mean)
head(faithful)
?install.packages
data("Forbes2000", package="HSAUR")
library(HSAUR)
library("HSAUR")
install.package("HSAUR")
install.packages("HSAUR")
library("HSAUR")
data("Forbes2000")
ls()
head(Forbes2000)
tail(Forbes2000)
names(Forbes2000)
str(Forbes2000)
table(Forbes2000$category)
str(Forbes2000)
table(Forbes2000$country)
str(Forbes2000$country)
rm(list=ls())
data(Forbes2000)
forbes <- data(Forbes2000)
str(Forbes2000)
forbes <- data(Forbes2000)
str(Forbes2000)
forbes<- Forbes2000
class(forbes)
dim(forbes)
nrow(forbes)
ncol(forbes)
levels(forbes[,'category'])
levels(forbes$category)
range(forbes[,"sales"])
diff(range(forbes[,"sales"]))
?diff
order_sales <- order(forbes$sales)
companies <- forbes$name
forbes[order_sales[1:3]]
companies[order_sales[1:3]]
forbes[order_sales[c(2000,1999,1998)]]
forbes[order_sales[c(2000,1999,1998)],]
forbes[order_sales[c(2000,1999,1998)], c("name","sales","profits","assets")]
forbes[order_sales[c(1998)], c("name","sales","profits","assets")]
forbes[order_sales[c(1998,1999,2000)], c("name","sales","profits","assets")]
order_sales
str(order_sales)
str(forbes)
View(Forbes2000)
forbes_order<- order(forbes)
forbes_order<- order(forbes$sales)
tail(forbes_order)
forbes$assets >1000
table(forbes$assets >1000)
table(complete.cases(forbes))
mprofits <- tapply(with(forbes, profits,category),median, na.rm=TRUE)
mprofits <- tapply(forbes$profits,forbes$category,median, na.rm=TRUE)
str(mprofits)
factor(mprofits)
summary(mprofits)
mprofits <- data.fram(tapply(forbes$profits,forbes$category,median, na.rm=TRUE))
mprofits <- data.frame(tapply(forbes$profits,forbes$category,median, na.rm=TRUE))
View(mprofits)
View(mprofits)
View(forbes)
library(datasets)
data(airquality)
qplot(Wind,Ozone,data=airquality, facets = .~factor(Month))
library(ggplot2)
install.packages("ggplot2")
qplot(Wind,Ozone,data=airquality, facets = .~factor(Month))
?qplot
??qplot
library(lattice)
qplot(Wind,Ozone,data=airquality, facets = .~factor(Month))
gplot(Wind,Ozone,data=airquality, facets = .~factor(Month))
qplot(Wind,Ozone,data=airquality, facets = .~factor(Month))
??qplot
library(ggplot2)
qplot(Wind,Ozone,data=airquality, facets = .~factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(doBy)
summaryBy(mpg + wt ~ cyl + vs, data = mtcars,
FUN = function(x) { c(m = mean(x), s = sd(x)) } )
install.packages("doBy")
library(doBy)
summaryBy(mpg + wt ~ cyl + vs, data = mtcars,
FUN = function(x) { c(m = mean(x), s = sd(x)) } )
library(doBy)
summaryBy(mpg + wt ~ cyl + vs, data = mtcars,
FUN = function(x) { c(m = mean(x)) } )
library(doBy)
summaryBy(mpg - cyl, data = mtcars,
FUN = function(x) { c(m = mean(x)) } )
library(doBy)
summaryBy(mpg ~ cyl, data = mtcars,
FUN = function(x) { c(m = mean(x)) } )
library(doBy)
summaryBy(mpg ~ cyl, data = mtcars,
FUN = function(x) { c(m = mean(x)) } )
library(doBy)
x <- summaryBy(mpg ~ cyl, data = mtcars,
FUN = function(x) { c(m = mean(x)) } )
x[1,] - x[3,]
x[1,2] - x[3,2]
r<-x[1,2] - x[3,2]
abs(r)
library(doBy)
x <- summaryBy(hp ~ cyl, data = mtcars,
FUN = function(x) { c(m = mean(x)) } )
x
r<-x[1,2] - x[3,2]
r
abs(r)
set.seed(1)
rpois(5, 2)
install.packages("shiny")
source('~/.active-rstudio-document', echo=TRUE)
author: "scott"
author: "scott"
date: "Friday, June 20, 2014"
output: html_document
runtime: shiny
---
This R Markdown document is made interactive using Shiny. Unlike the more traditional workflow of creating static reports, you can now create documents that allow your readers to change the assumptions underlying your analysis and see the results immediately.
To learn more, see [Interative Documents](http://rmarkdown.rstudio.com/authoring_shiny.html).
## Inputs and Outputs
getwd()
rm(list=ls())
c = rep(0:1,each=500)
x = rnorm(1000)
lp = -3 + 2*c*x
link_lp = exp(lp)/(1 + exp(lp))
y = (runif(1000) < link_lp)
log.int = glm(y~as.factor(c)*x, family=binomial)
summary(log.int)
mycols = c("red","blue")
plot(log.int$fitted.values ~ x, col=mycols[c+1])
install.packages("Rfacebook")
install.packages("Rook")
source('~/.active-rstudio-document', echo=TRUE)
View(rpartProbs)
source('~/GitHub/RepData_PeerAssessment1/RepData_PeerAssessment1-master/testing2.R', echo=TRUE)
View(merge)
View(miss)
View(miss)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(merge)
View(miss)
source('~/.active-rstudio-document', echo=TRUE)
View(mUse)
View(mUse)
View(iData)
source('~/.active-rstudio-document', echo=TRUE)
View(miss)
View(mUse)
View(iData)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?paste
source('~/.active-rstudio-document', echo=TRUE)
View(i)
source('~/.active-rstudio-document', echo=TRUE)
View(merge)
?append
source('~/.active-rstudio-document', echo=TRUE)
summary(merge2)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(merge)
source('~/.active-rstudio-document', echo=TRUE)
View(activeComplete)
source('~/.active-rstudio-document', echo=TRUE)
View(activeComplete)
source('~/.active-rstudio-document', echo=TRUE)
View(activeComplete)
View(actComplete)
View(dowMean)
View(mean_steps_per_Day)
View(activeComplete)
View(iData)
View(activeComplete)
source('~/.active-rstudio-document', echo=TRUE)
View(activeComplete)
subset(activeComplete, activeComplete$interval == 835)
subset(activeComplete, activeComplete$interval == 835 & activeComplete$dow == "Friday")
subset(activeComplete, activeComplete$interval == 835 & activeComplete$dow == "Monda")
subset(activeComplete, activeComplete$interval == 835 & activeComplete$dow == "Monday")
subset(activeComplete, activeComplete$interval == 835 & activeComplete$dow == "tuesday")
subset(activeComplete, activeComplete$interval == 835 & activeComplete$dow == "Tuesday")
subset(activeComplete, activeComplete$interval == 835 & activeComplete$dow == "Thursday")
(423 + 747 + 757 + 0 + 12 + 0 + 78 + 0)/8
source('~/.active-rstudio-document', echo=TRUE)
subset(activeComplete, activeComplete$interval == 835 & activeComplete$dow == "Thursday")
subset(activeComplete, activeComplete$interval == 835 & activeComplete$dow == "Tuesday")
subset(activeComplete, activeComplete$interval == 835 & activeComplete$dow == "Monday")
summary(active)
summary(activeComplete)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(replaceMissing)
View(replaceMissing)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
replaceMissing <- active[complete.cases(active),]
replaceMissing$dow <- weekdays(as.Date(activeComplete$date))
mean_steps_per_Day <- aggregate(activeComplete$steps,
by=list(interval = activeComplete$interval,
dow = activeComplete$dow),
FUN=mean)
dowMean <- mean_steps_per_Day[,1:3]
names(dowMean)[1:3] <-  c("interval","dow","steps")
missing <- subset(active, is.na(active$steps))
missing$dow <- weekdays(as.Date(missing$date))
miss <- aggregate(missing$steps,by=list(date=missing$date),mean)
miss$dow <- weekdays(as.Date(miss$date))
for(i in 1:nrow(miss)){
mUse <- subset(missing,missing$date == miss$date[i])
iData <- subset(mean_steps_per_Day, mean_steps_per_Day$dow == miss$dow[i])
names(iData)[3] <- "steps"
mUse$steps <- ifelse(is.na(mUse$steps),
iData$steps[mUse$interval==iData$interval] ,
mUse$steps)
# merge missing and activeComplete
replaceMissing <- rbind(mUse,replaceMissing)
}
meanActiveComplete <- mean(activeComplete$steps)
meanReplaceMissing <- mean(replaceMissing$steps)
setwd("C:\\Users\\srobin\\Documents\\GitHub\\RepData_PeerAssessment1\\RepData_PeerAssessment1-master")
active <- read.csv(paste0(getwd(),"\\activity\\activity.csv"))
summary(active)
activeComplete <- active[complete.cases(active),]
#activeComplete$dow <- weekdays(as.Date(activeComplete$date))
perDay <- activeComplete[,1:2]
sum_steps_per_Day <- aggregate(.~ date, data=perDay,sum)
hist(sum_steps_per_Day$steps, plot=TRUE, breaks=10, main="Histogram of Steps per Day")
summary(sum_steps_per_Day)
mSteps<-mean(activeComplete$steps)
mSteps_per_Day <- aggregate(.~ date, data=perDay,mean)
hist(mSteps_per_Day$steps, plot=TRUE, breaks=10)
medSteps<-median(activeComplete$steps)
daily <- activeComplete[,c(1,3)]
pattern <- aggregate(.~ interval,data=daily, mean, na.rm=TRUE)
plot(pattern$interval,pattern$steps, type="l")
maxSteps <- pattern[pattern$steps > 200,]
maxSteps
replaceMissing <- active[complete.cases(active),]
replaceMissing$dow <- weekdays(as.Date(activeComplete$date))
mean_steps_per_Day <- aggregate(activeComplete$steps,
by=list(interval = activeComplete$interval,
dow = activeComplete$dow),
FUN=mean)
dowMean <- mean_steps_per_Day[,1:3]
names(dowMean)[1:3] <-  c("interval","dow","steps")
missing <- subset(active, is.na(active$steps))
missing$dow <- weekdays(as.Date(missing$date))
miss <- aggregate(missing$steps,by=list(date=missing$date),mean)
miss$dow <- weekdays(as.Date(miss$date))
for(i in 1:nrow(miss)){
mUse <- subset(missing,missing$date == miss$date[i])
iData <- subset(mean_steps_per_Day, mean_steps_per_Day$dow == miss$dow[i])
names(iData)[3] <- "steps"
mUse$steps <- ifelse(is.na(mUse$steps),
iData$steps[mUse$interval==iData$interval] ,
mUse$steps)
# merge missing and activeComplete
replaceMissing <- rbind(mUse,replaceMissing)
}
meanActiveComplete <- mean(activeComplete$steps)
meanReplaceMissing <- mean(replaceMissing$steps)
replaceMissing <- active[complete.cases(active),]
replaceMissing$dow <- weekdays(as.Date(replaceMissing$date))
mean_steps_per_Day <- aggregate(activeComplete$steps,
by=list(interval = activeComplete$interval,
dow = activeComplete$dow),
FUN=mean)
dowMean <- mean_steps_per_Day[,1:3]
names(dowMean)[1:3] <-  c("interval","dow","steps")
missing <- subset(active, is.na(active$steps))
missing$dow <- weekdays(as.Date(missing$date))
miss <- aggregate(missing$steps,by=list(date=missing$date),mean)
miss$dow <- weekdays(as.Date(miss$date))
for(i in 1:nrow(miss)){
mUse <- subset(missing,missing$date == miss$date[i])
iData <- subset(mean_steps_per_Day, mean_steps_per_Day$dow == miss$dow[i])
names(iData)[3] <- "steps"
mUse$steps <- ifelse(is.na(mUse$steps),
iData$steps[mUse$interval==iData$interval] ,
mUse$steps)
# merge missing and activeComplete
replaceMissing <- rbind(mUse,replaceMissing)
}
meanActiveComplete <- mean(activeComplete$steps)
meanReplaceMissing <- mean(replaceMissing$steps)
View(activeComplete)
